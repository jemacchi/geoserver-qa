version: "3.8"
      
volumes:
  rabbitmq_data: # volume for rabbitmq data, so it doesn't create an anonymous one on each container
  postgis_data:
  geowebcache_data:
#  acl_data:
  test_shared_data_directory:
    driver_opts:
      type: none
      o: bind
      device: $PWD/docker-compose_datadir
    
networks:
  gs-cloud-network:
#    driver: bridge
        
services:
  postgis:
    image: postgis/postgis:latest
    environment:
      POSTGRES_DB: postgis
      POSTGRES_USER: postgis
      POSTGRES_PASSWORD: postgis
      POSTGIS_GDAL_ENABLED_DRIVERS: ENABLE_ALL
    networks:
      - gs-cloud-network
    volumes:
      - postgis_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G
#  acldb:
#   image: postgis/postgis:latest
#    environment:
#      - POSTGRES_DB=acl
#      - POSTGRES_USER=acl
#      - POSTGRES_PASSWORD=acls3cr3t
#    networks:
#      - gs-cloud-network
#    volumes:
#      - acl_data:/var/lib/postgresql/data
#    ports:
#      - 6432:5432
#    deploy:
#      resources:
#        limits:
#          cpus: '2.0'
#          memory: 1G
    
  rabbitmq:
    image: rabbitmq:3.11-management
    user: ${GS_USER}
    restart: always
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - gs-cloud-network
    ports:
      - "5672:5672"
      - "15672:15672"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G

  # Eureka service discovery. This is a Discovery First Bootstrap configuration.
  # The discovery service is the only fixed entry point.
  # Browse to http://localhost:8761 to check all services are registered.
  # Run docker-compose -f docker-compose.yml -f docker-compose-discovery-ha.yml to run extra discovery service instances for HA
  discovery:
    image: geoservercloud/geoserver-cloud-discovery:${TAG}
    user: ${GS_USER}
    environment:
      JAVA_OPTS: "${DISCOVERY_JAVA_OPTS}"
    ports:
      - 8761:8761 # for development, so services can be run from localhost and find the discovery service running on docker
    networks:
      - gs-cloud-network
    depends_on:
      - config
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M

  # Spring Cloud Config service, provides centralized configuration to all
  # microservices. Being a Discovery First Bootstrap configuration, it'll
  # register itself with the Eureka discovery service and can be scaled
  config:
    image: geoservercloud/geoserver-cloud-config:${TAG}
    user: ${GS_USER}
    environment:
      JAVA_OPTS: "${CONFIG_JAVA_OPTS}"
      # Either 'git' or 'native'. Use the default sample git repository to download the services configuration from
      # If 'git', BEWARE config server will look for a branch called "master", and github changed the default branch name to "main"
      # For more information, see https://cloud.spring.io/spring-cloud-config/multi/multi__spring_cloud_config_server.html#_git_backend
      SPRING_PROFILES_ACTIVE: native
      # 'git' profile config
      CONFIG_GIT_URI: https://github.com/geoserver/geoserver-cloud-config
      CONFIG_GIT_BASEDIR: /tmp/git_config
      # 'native' profile config
      CONFIG_NATIVE_PATH: /tmp/config
    networks:
      - gs-cloud-network
    volumes:
      - ./config:/tmp/config
    ports:
      - 8888:8080
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M

  admin:
    image: geoservercloud/geoserver-cloud-admin-server:${TAG}
    user: ${GS_USER}
    depends_on:
      - discovery
    ports:
      - 9091:8080
    networks:
      - gs-cloud-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 512M
    
  # Application facade, provides a single entry point routing to all
  # microservices (e.g. http://localhost:9090/geoserver/wms, http://localhost:9090/geoserver/wfs, etc)
  gateway:
    image: geoservercloud/geoserver-cloud-gateway:${TAG}
    user: ${GS_USER}
    depends_on:
      - discovery
    environment:
      JAVA_OPTS: ${GATEWAY_JAVA_OPTS}
      SPRING_PROFILES_ACTIVE: dev #exposes the catalog and config API at /api/v1/**
      RETRY_MAX_ATTEMPTS: 100
      # eat our own dogfood and set a base path
      GEOSERVER_BASE_PATH: ${BASE_PATH}
    networks:
      - gs-cloud-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 1G

#  acl:
#    image: geoservercloud/geoserver-acl:1.0.0
#    volumes:
#      - ./config/acl-service.yml:/opt/app/bin/acl.yml
#    depends_on:
#      - acldb
#    environment:
#      GEOSERVER_BASE_PATH: ${BASE_PATH}
#    networks:
#      - gs-cloud-network
#    ports:
#      - 9000:8080
#    deploy:
#      resources:
#        limits:
#          cpus: '4.0'
#          memory: 2G

  # WFS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wfs=5)
  wfs:
    image: geoservercloud/geoserver-cloud-wfs:${TAG}
    user: ${GS_USER}
    depends_on:
      - rabbitmq
      - discovery
    environment:
      SPRING_PROFILES_ACTIVE: "${DEFAULT_PROFILES},datadir"
      JAVA_OPTS: "${WFS_JAVA_OPTS}"
      RETRY_MAX_ATTEMPTS: 100
    volumes:
      - test_shared_data_directory:/opt/app/data_directory
    networks:
      - gs-cloud-network
    #tmpfs: #TODO: avoid runs creating volumes at all
    #  - /tmp
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # WMS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wms=5)
  wms:
    image: geoservercloud/geoserver-cloud-wms:${TAG}
    user: ${GS_USER}
    depends_on:
      - rabbitmq
      - discovery
    environment:
      SPRING_PROFILES_ACTIVE: "${DEFAULT_PROFILES},datadir"
      JAVA_OPTS: "${WMS_JAVA_OPTS}"
      RETRY_MAX_ATTEMPTS: 100
    volumes:
      - test_shared_data_directory:/opt/app/data_directory      
    networks:
      - gs-cloud-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # WCS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wcs=5)
  wcs:
    image: geoservercloud/geoserver-cloud-wcs:${TAG}
    user: ${GS_USER}
    depends_on:
      - rabbitmq
      - discovery
    environment:
      SPRING_PROFILES_ACTIVE: "${DEFAULT_PROFILES},datadir"
      JAVA_OPTS: "${WCS_JAVA_OPTS}"
      RETRY_MAX_ATTEMPTS: 100
    volumes:
      - test_shared_data_directory:/opt/app/data_directory
    networks:
      - gs-cloud-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # WPS microservice, port dynamically allocated to allow scaling (e.g docker-compose scale wps=5)
  wps:
    image: geoservercloud/geoserver-cloud-wps:${TAG}
    user: ${GS_USER}
    depends_on:
      - rabbitmq
      - discovery
    environment:
      SPRING_PROFILES_ACTIVE: "${DEFAULT_PROFILES},datadit"
      JAVA_OPTS: "${WPS_JAVA_OPTS}"
      RETRY_MAX_ATTEMPTS: 100
    volumes:
      - test_shared_data_directory:/opt/app/data_directory
    networks:
      - gs-cloud-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G

  # REST config microservice, port dynamically allocated to allow scaling (e.g docker-compose scale rest=5)
  rest:
    image: geoservercloud/geoserver-cloud-rest:${TAG}
    user: ${GS_USER}
    depends_on:
      - rabbitmq
      - discovery
    environment:
      SPRING_PROFILES_ACTIVE: "${DEFAULT_PROFILES},datadir"
      JAVA_OPTS: "${REST_JAVA_OPTS}"
      RETRY_MAX_ATTEMPTS: 100
    volumes:
      - test_shared_data_directory:/opt/app/data_directory
    networks:
      - gs-cloud-network
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1.5'
          memory: 2G

  # WEB UI microservice
  webui:
    image: geoservercloud/geoserver-cloud-webui:${TAG}
    user: ${GS_USER}
    depends_on:
      - rabbitmq
      - discovery
    environment:
      SPRING_PROFILES_ACTIVE: "${DEFAULT_PROFILES},datadir"
      JAVA_OPTS: "${WEBUI_JAVA_OPTS}"
      RETRY_MAX_ATTEMPTS: 100
    volumes:
      - test_shared_data_directory:/opt/app/data_directory
    networks:
      - gs-cloud-network
    volumes:
      - geowebcache_data:/data/geowebcache
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
  gwc:
    image: geoservercloud/geoserver-cloud-gwc:${TAG}
    user: ${GS_USER}
    depends_on:
      - rabbitmq
      - discovery
    environment:
      SPRING_PROFILES_ACTIVE: "${DEFAULT_PROFILES},datadir"
      RETRY_MAX_ATTEMPTS: 100
    volumes:
      - test_shared_data_directory:/opt/app/data_directory
    networks:
      - gs-cloud-network
    volumes:
      - geowebcache_data:/data/geowebcache
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
